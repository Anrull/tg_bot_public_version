from aiogram import types, Bot
from aiogram.types.input_file import FSInputFile
from backend.command_schedule import get_week, schedule_time
from backend.command_schedule import send_tomorrow_schedule, send_schedule
import config as config
import backend.new as news
from backend.days import get_days_schedule
import backend.add_treker as add_tr
import backend.timetable as timetable
import backend.dirty_backend.translator as tr
import backend.dirty_backend.db.new_user as user
import backend.callbacks.callbacks as callbacks
from backend.dirty_backend.make_zip import zip_files

bot = Bot(token=config.TOKEN)


async def get_teacher_or_student(query: types.CallbackQuery, callback_data: callbacks.UserCallback):
    status_message = await query.message.answer("–û–±—Ä–∞–±–æ—Ç–∫–∞...")
    user.add_sub(query.message, callback_data.sub)

    # await status_message.edit_text("–†–æ–ª—å —É—á–∏—Ç–µ–ª—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç
    # –µ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º - –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å —É—á–µ–Ω–∏–∫–∞ :) by @Anrull")
    await status_message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç", reply_markup=callbacks.builder_subjects_keyboards)
    await query.answer()


async def get_teacher(query: types.CallbackQuery, callback_data: callbacks.UserCallback):
    status_message = await query.message.answer("–û–±—Ä–∞–±–æ—Ç–∫–∞...")
    user.add_role(query.message, "teacher")

    # await status_message.edit_text("–†–æ–ª—å —É—á–∏—Ç–µ–ª—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ
    # –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º - –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å —É—á–µ–Ω–∏–∫–∞ :) by @Anrull")
    await status_message.edit_text("–ö—Ç–æ –∏–º–µ–Ω–Ω–æ?", reply_markup=callbacks.builder_subjects_keyboards)
    await query.answer()


async def get_student(query: types.CallbackQuery, callback_data: callbacks.UserCallback):
    status_message = await query.message.answer("–û–±—Ä–∞–±–æ—Ç–∫–∞...")
    user.add_role(query.message, "student")
    
    await status_message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:", reply_markup=callbacks.builder_classes_keyboards)
    await query.answer()
    

async def send_zip(query: types.CallbackQuery):
    status_message = await query.message.answer("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
    try:
        await status_message.edit_text("–°–æ–∑–¥–∞–Ω–∏–µ zip... üìÅ")
        await zip_files()
    except:
        await status_message.edit_text("–û—à–∏–±–∫–∞ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞")

    try:
        await status_message.edit_text("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ üì®")
        await bot.send_document(query.from_user.id, FSInputFile("time_files/Files_by_Anloss.zip"))
        await status_message.edit_text("‚úÖ –ì–æ—Ç–æ–≤–æ")
        await bot.delete_message(message_id=status_message.message_id, chat_id=query.message.chat.id)
    except:
        await query.message.answer("‚ùå –ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã. –ù–∞–ø–∏—à–∏—Ç–µ @Anrull")
    
    await query.answer()


async def get_add_sub(query: types.CallbackQuery, callback_data: callbacks.SubjectsCallback):
    """–í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞"""
    user.add_sub(query.message, callback_data.sub)
    await query.message.answer(f"–û—Ç–ª–∏—á–Ω–æ, –∫–æ–º–∞–Ω–¥–∞ /help –ø–æ–º–æ–∂–µ—Ç —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ –∏ –µ–≥–æ –∫–æ–º–∞–Ω–¥–∞—Ö",
                               reply_markup=callbacks.funct_builder)
    await query.answer()


async def get_add_newsletter(query: types.CallbackQuery, callback_data: callbacks.AddNewsletter):
    status_mesage = await query.message.answer("–û–±—Ä–∞–±–æ—Ç–∫–∞...")
    user.add_newsletter(query.message.chat.id, str(int(callback_data.add)))
    await status_mesage.edit_text(
        "–ü—Ä–∏–Ω—è—Ç–æ, —Ç–µ–ø–µ—Ä—å –≤–∞–º {}–±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è".format(config.dict_of_not[str(int(callback_data.add))]))
    await query.answer()


async def get_days_value(query: types.CallbackQuery, callback_data: callbacks.DaysCallback):
    role = user.get_role(query.message.chat.id)
    # print(query.message.from_user.id)
    # print(query.message.chat.id)
    
    if role == "student":
        await timetable.send_timetable(query.message, week=callback_data.week, day=callback_data.day)
    elif role == "teacher":
        await timetable.send_timetable_teacher(query.message, week=callback_data.week, day=callback_data.day)
    
    await query.answer()


async def get_language(query: types.CallbackQuery, callback_data: callbacks.LangCallback):
    user.add_settings(query.message, [[callback_data.lang]])
    if callback_data.lang != "ru":
        await query.message.answer(await tr.translate_text("–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –≤—ã–±–æ—Ä!", callback_data.lang))
    else:
        await query.message.answer("–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –≤—ã–±–æ—Ä")
    await query.answer()


async def get_send_random_value(query: types.CallbackQuery, callback_data: callbacks.ClassesCallback):
    """–í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞"""
    status_mssg = await query.message.answer('–û–∂–∏–¥–∞–π—Ç–µ...\n‚òï –ó–∞–≤–∞—Ä–∏–≤–∞–µ–º –∫–æ—Ñ–µ')
    
    # user(query.message)
    user.new_users(query.message)
    text_class = callback_data.classes
    user.add_class(message=query.message, text_class=text_class)
    
    await status_mssg.edit_text('–ì–æ—Ç–æ–≤–æ ‚úÖ')
    await status_mssg.edit_text(f'–ü—Ä–∏–Ω—è—Ç–æ, —É—á–µ–Ω–∏–∫ {text_class} –∫–ª–∞—Å—Å–∞ üìö\n–ö–æ–º–∞–Ω–¥–∞ /help –ø–æ–º–æ–∂–µ—Ç —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ')
    await query.answer()


async def sort_menu(query, callback_data):
    if callback_data.command not in ["0—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –æ–ª–∏–º–ø–∏–∞–¥–µ", "–£–¥–∞–ª–∏—Ç—å –ø–æ –æ–ª–∏–º–ø–∏–∞–¥–µ"]:
        await add_tr.delete_messages(query)

    match callback_data.command:
        case "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤":
            await schedule_time(query.message)
        case "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤–æ—Å—Ç–∏":
            await news.get_last_news(query.message)
        case "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é":
            await get_week(query.message)
        case "–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É":
            await add_tr.add_command(query.message)
        case "–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ–ª–∏–º–ø–∏–∞–¥—ã":
            await add_tr.get_my_olimps(query.message)
        case "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—ã":
            await query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä', reply_markup=callbacks.get_olimps_builder_keyboards)
        case "0—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –æ–ª–∏–º–ø–∏–∞–¥–µ":
            step = config.olimp_list_step
            spif = callback_data.sub
            spif_min = 0 if spif - step < 0 else spif - step
            llp = len(callbacks.builder_get_olimps_keyboard.inline_keyboard)
            spif_max = llp - step if spif + step > llp - step else spif + step
            will = callbacks.builder_get_olimps_keyboard.model_copy()
            will.inline_keyboard = callbacks.builder_get_olimps_keyboard.inline_keyboard[spif:spif + step]
            will.inline_keyboard.insert(0, [
                callbacks.InlineKeyboardButton(text=config.olimp_list_left,
                                               callback_data=f'my:sort:{spif_min}:0—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –æ–ª–∏–º–ø–∏–∞–¥–µ'),
                callbacks.InlineKeyboardButton(text=config.olimp_list_right,
                                               callback_data=f'my:sort:{spif_max}:0—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –æ–ª–∏–º–ø–∏–∞–¥–µ')])
            if query.message.reply_markup.inline_keyboard[0][0].text == config.olimp_list_left:
                msg = await query.message.edit_reply_markup(reply_markup=will)
            else:
                msg = await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ª–∏–º–ø–∏–∞–¥—É:", reply_markup=will)
        case "0—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ —ç—Ç–∞–ø—É":
            msg = await query.message.answer(
                text="–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–ø –æ–ª–∏–º–ø–∏–∞–¥—ã", reply_markup=callbacks.sort_builder_stage_keyboard)
        case "0—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É":
            msg = await query.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç", reply_markup=callbacks.sort_builder_subjects_keyboard
            )
        case "0—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É":
            msg = await query.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞:", reply_markup=callbacks.builder_get_teacher_keyboard)
        case "–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
            msg = await query.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", reply_markup=callbacks.funct_builder2
            )
        case "–í—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å":
            msg = await query.message.answer(
                """ü§ô –ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç-—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ö—Ç–æ —Ç—ã?""",
                reply_markup=callbacks.builder_who_are_you_keyboard
            )
        case "–ó–∞ —Å–µ–≥–æ–¥–Ω—è":
            await send_schedule(query.message)
        case "–ó–∞–≤—Ç—Ä–∞":
            await send_tomorrow_schedule(query.message)
        case "–ü–æ –¥–Ω—è–º":
            await get_days_schedule(query.message)
        case "–£–¥–∞–ª–∏—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—É":
            msg = await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –æ–ø—Ü–∏—é", reply_markup=callbacks.delete_menu)
        case "–£–¥–∞–ª–∏—Ç—å –ø–æ —ç—Ç–∞–ø—É":
            msg = await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–ø", reply_markup=callbacks.builder_delete_stage_keyboards)
        case "–£–¥–∞–ª–∏—Ç—å –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É":
            msg = await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç",
                                             reply_markup=callbacks.builder_delete_subjects_for_treker)
        case "–£–¥–∞–ª–∏—Ç—å –ø–æ –æ–ª–∏–º–ø–∏–∞–¥–µ":
            step = config.olimp_list_step
            spif = callback_data.sub
            spif_min = 0 if spif - step < 0 else spif - step
            llp = len(callbacks.builder_delete_olimps_keyboard.inline_keyboard)
            spif_max = llp - step if spif + step > llp - step else spif + step
            will = callbacks.builder_delete_olimps_keyboard.model_copy()
            will.inline_keyboard = callbacks.builder_delete_olimps_keyboard.inline_keyboard[spif:spif + step]
            will.inline_keyboard.insert(0, [
                callbacks.InlineKeyboardButton(text=config.olimp_list_left,
                                               callback_data=f'my:sort:{spif_min}:–£–¥–∞–ª–∏—Ç—å –ø–æ –æ–ª–∏–º–ø–∏–∞–¥–µ'),
                callbacks.InlineKeyboardButton(text=config.olimp_list_right,
                                               callback_data=f'my:sort:{spif_max}:–£–¥–∞–ª–∏—Ç—å –ø–æ –æ–ª–∏–º–ø–∏–∞–¥–µ')])
            if query.message.reply_markup.inline_keyboard[0][0].text == config.olimp_list_left:
                msg = await query.message.edit_reply_markup(reply_markup=will)
            else:
                msg = await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ª–∏–º–ø–∏–∞–¥—É:", reply_markup=will)
        case "–£–¥–∞–ª–∏—Ç—å –ø–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É":
            msg = await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞",
                                             reply_markup=callbacks.builder_delete_teacher_keyboard)
        case "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ":
            await get_delete_olimps(query.message)
    try:
        user.add_ids(query.message, msg.message_id)
    except:
        pass
    await query.answer()


async def delete_olimps(message, members=None):
    if members is None:
        members = user.get_olimps_treker(message)
    msg = await message.answer("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
    await add_tr.send_delete_olimps(members, message, msg)


async def get_delete_olimps(message: types.Message):
    await delete_olimps(message)


async def delete_olimp_for_callbacks(query, callback_data):
    index = callback_data.index
    msg = await query.message.answer("–û–±—Ä–∞–±–æ—Ç–∫–∞...")
    match index:
        case 999:
            await msg.edit_text("–£–¥–∞–ª–µ–Ω–∏–µ –æ–ª–∏–º–ø–∏–∞–¥—ã –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        case _:
            try:
                user.get_delete_olimps(query.message, index)
                await msg.edit_text("–ó–∞–ø–∏—Å—å –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞")
            except:
                await msg.edit_text("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è...")