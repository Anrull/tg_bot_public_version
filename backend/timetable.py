from aiogram.types import FSInputFile
from aiogram import Bot

import backend.dirty_backend.schedule as schedule
import backend.dirty_backend.translator as tr
import backend.dirty_backend.db.new_user as User
import backend.dirty_backend.test3 as test3
import backend.dirty_backend.search as search
import ast
from config import TOKEN

weeks = {0: "—á–µ—Ç", 1: "–Ω–µ—á–µ—Ç"}
days = {0: "–ø–Ω", 1: "–≤—Ç", 2: "—Å—Ä", 3: "—á—Ç", 4: "–ø—Ç"}

bot = Bot(TOKEN)


async def send_timetable(message, day=0, week=1, classes=None):
    status_mssg = await message.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞... ‚åõ")
    # User.new_users()
    result = User.check(message)
    if result:
        await status_mssg.edit_text("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è üïë")

        try:
            try:
                await status_mssg.edit_text("–ò–¥–µ—Ç –ø–æ–∏—Å–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
                
                if not classes:
                    list_schedule = await schedule.send_schedule_text(result, week=week, day=day)
                else:
                    list_schedule = await schedule.send_schedule_text(classes, week=week, day=day)
                lang = User.get_lang(message)
                lang = ast.literal_eval(lang)
                if lang[0][0] != "ru":
                    list_schedule = await tr.translate_list(list_schedule, lang[0][0])
            except:
                print("–æ—à–∏–±–∫–∞ –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
                raise Exception

            await status_mssg.edit_text("–ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è üñº")

            try:
                if not classes:
                    data = f"{result}, –Ω–µ–¥: {weeks[int(week)]}, –¥–µ–Ω—å: {days[int(day)]}, lang: {lang[0][0]}"
                else:
                    data = f"{classes}, –Ω–µ–¥: {weeks[int(week)]}, –¥–µ–Ω—å: {days[int(day)]}, lang: {lang[0][0]}"
                # print(1)
                test3.draw_timetable(list_schedule, data)
            except Exception:
                print(list_schedule)
                print("–æ—à–∏–±–∫–∞ –≤ –æ—Ç—Ä–∏—Å–æ–≤–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
                raise Exception
            
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=status_mssg.message_id)
            except:
                print("–æ—à–∏–±–∫–∞ –≤ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")

            try:
                # photo = FSInputFile("images/output.png")
                photo = FSInputFile("images/schedule.png")

                await bot.send_photo(chat_id=message.chat.id, photo=photo)
            except:
                print("–æ—à–∏–±–∫–∞ –≤ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
                raise Exception
        except Exception:
            await status_mssg.edit_text("‚ùå –û—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏—Ç–µ @Anrull –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ –ø–æ–ª–µ—Ç–∞")
    else:
        await status_mssg.edit_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–¥–æ —É–∫–∞–∑–∞—Ç—å –∫–ª–∞—Å—Å üîê")
        

async def send_timetable_teacher(message, day=0, week=1):
    status_mssg = await message.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞... ‚åõ")
    User.new_users(message)
    sub = User.get_sub(message)
    if sub != "student":
        await status_mssg.edit_text("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è üïë")

        try:
            try:
                await status_mssg.edit_text("–ò–¥–µ—Ç –ø–æ–∏—Å–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
                # print(sub)
                list_schedule = await search.upgrate_search(sub, week, day)
                lang = User.get_lang(message)
                lang = ast.literal_eval(lang)
                if lang[0][0] != "ru":
                    list_schedule = await tr.translate_list(list_schedule, lang[0][0])
            except:
                print("–æ—à–∏–±–∫–∞ –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
                raise Exception

            await status_mssg.edit_text("–ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è üñº")

            try:
                print(sub, day, week)
                data = f"{sub}, –Ω–µ–¥: {weeks[int(week)]}, –¥–µ–Ω—å: {days[int(day)]}, lang: {lang[0][0]}"
                # print(data)
                test3.draw_timetable(list_schedule, data, teacher=True)
            except Exception:
                print(list_schedule)
                print("–æ—à–∏–±–∫–∞ –≤ –æ—Ç—Ä–∏—Å–æ–≤–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
                raise Exception
            
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=status_mssg.message_id)
            except:
                print("–æ—à–∏–±–∫–∞ –≤ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")

            try:
                # photo = FSInputFile("images/output.png")
                photo = FSInputFile("images/schedule.png")

                await bot.send_photo(chat_id=message.chat.id, photo=photo)
            except:
                print("–æ—à–∏–±–∫–∞ –≤ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
                raise Exception
        except Exception:
            await status_mssg.edit_text("‚ùå –û—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏—Ç–µ @Anrull –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ –ø–æ–ª–µ—Ç–∞")
    else:
        await status_mssg.edit_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–¥–æ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–π—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—É–Ω–∫—Ç—ã")


async def send_timetable_schedule(user_id, num=0, day=0, week=1, classes=None):
    # User.new_users()
    result = User.check_schedule(user_id)
    if result:
        try:
            try:                
                if not classes:
                    list_schedule = await schedule.send_schedule_text(result, week=week, day=day)
                else:
                    list_schedule = await schedule.send_schedule_text(classes, week=week, day=day)
                lang = User.get_lang(user_id=user_id)
                lang = ast.literal_eval(lang)
                if lang[0][0] != "ru":
                    list_schedule = await tr.translate_list(list_schedule, lang[0][0])
            except:
                print("–æ—à–∏–±–∫–∞ –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
                raise Exception

            try:
                if not classes:
                    data = f"{result}, –Ω–µ–¥: {weeks[int(week)]}, –¥–µ–Ω—å: {days[int(day)]}, lang: {lang[0][0]}"
                else:
                    data = f"{classes}, –Ω–µ–¥: {weeks[int(week)]}, –¥–µ–Ω—å: {days[int(day)]}, lang: {lang[0][0]}"
                # print(1)
                test3.draw_timetable(list_schedule, data, num=num)
            except Exception:
                print(list_schedule)
                print("–æ—à–∏–±–∫–∞ –≤ –æ—Ç—Ä–∏—Å–æ–≤–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
                raise Exception
            try:
                # photo = FSInputFile("images/output.png")
                photo = FSInputFile(f"images/schedule{num}.png")

                await bot.send_photo(chat_id=user_id, photo=photo)
            except:
                print("–æ—à–∏–±–∫–∞ –≤ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
                raise Exception
            # # –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
            # file_path = f"images/schedule{num}.png"

            # # –£–¥–∞–ª–∏—Ç–µ —Ñ–∞–π–ª
            # os.remove(file_path)

            # # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –±—ã–ª –ª–∏ —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω
            # if not os.path.exists(file_path):
            #     print("–§–∞–π–ª –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
            # else:
            #     print("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª.")
        except Exception:
            pass


async def send_timetable_teacher_schedule(user_id, num=0, day=0, week=1):
    sub = User.get_sub(user_id=user_id)
    if sub != "student":
        try:
            try:
                # print(sub)
                list_schedule = await search.upgrate_search(sub, week, day)
                lang = User.get_lang(user_id=user_id)
                lang = ast.literal_eval(lang)
                if lang[0][0] != "ru":
                    list_schedule = await tr.translate_list(list_schedule, lang[0][0])
            except:
                print("–æ—à–∏–±–∫–∞ –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
                raise Exception

            try:
                print(sub, day, week)
                data = f"{sub}, –Ω–µ–¥: {weeks[int(week)]}, –¥–µ–Ω—å: {days[int(day)]}, lang: {lang[0][0]}"
                # print(data)
                test3.draw_timetable(list_schedule, data, num=num, teacher=True)
            except Exception:
                print(list_schedule)
                print("–æ—à–∏–±–∫–∞ –≤ –æ—Ç—Ä–∏—Å–æ–≤–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
                raise Exception

            try:
                # photo = FSInputFile("images/output.png")
                photo = FSInputFile(f"images/schedule{num}.png")

                await bot.send_photo(chat_id=user_id, photo=photo)
            except:
                print("–æ—à–∏–±–∫–∞ –≤ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
                raise Exception
            # # –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
            # file_path = f"images/schedule{num}.png"

            # # –£–¥–∞–ª–∏—Ç–µ —Ñ–∞–π–ª
            # os.remove(file_path)

            # # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –±—ã–ª –ª–∏ —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω
            # if not os.path.exists(file_path):
            #     print("–§–∞–π–ª –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
            # else:
            #     print("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª.")
        except Exception:
            pass
