from aiogram import types, Bot
import config as config
import backend.timetable as timetable
import backend.dirty_backend.db.new_user as user
import backend.callbacks.callbacks as callbacks
import backend.dirty_backend.db.add_members as add_members


bot = Bot(token=config.TOKEN)


async def get_other_message(message: types.Message):
    status_message = await message.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞üí§")
    try:
        # 9B –Ω/—á –ø–Ω
        lst = message.text.split(" ")
        
        if len(lst) != 3:
            raise Exception
        
        await bot.delete_message(chat_id=message.chat.id, message_id=status_message.message_id)
        
        await timetable.send_timetable(
            message, week=config.dict_ru_week[lst[1]], day=config.dict_ru_days_of_week[lst[-1]], classes=lst[0])
    except Exception:
        try:
            msg = await status_message.edit_text("–í–æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞-—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è",
                                                 reply_markup=callbacks.funct_builder)
        except:
            msg = await message.answer("–í–æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞-—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è",
                                       reply_markup=callbacks.funct_builder)

        user.add_ids(message, msg.message_id)


async def other_message_handler(message):
    if message.content_type == "document":
        status_message = await message.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è...")
        caption = message.caption
        if caption.lower() in ["–∑–∞–º–µ–Ω–∏—Ç—å anmori", "replace anmori"]:
            await status_message.edit_text("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞")
            file_id = message.document.file_id
            file = await bot.get_file(file_id)
            file_path = file.file_path
            try:
                await bot.download_file(file_path, "time_files/file.xlsx")
            except:
                await status_message.edit_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞")
                return
            await status_message.edit_text("–ó–∞–º–µ–Ω–∞ –≤ –ë–î...")
            try:
                print(file_path)
                await add_members.replace_db("time_files/file.xlsx")
                await status_message.edit_text("–ë–î –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            except:
                await status_message.edit_text("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–¥")
        if caption.lower() in ["–æ–±–Ω–æ–≤–∏—Ç—å anmori", "update anmori"]:
            await status_message.edit_text("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞")
            file_id = message.document.file_id
            file = await bot.get_file(file_id)
            file_path = file.file_path
            try:
                await bot.download_file(file_path, "time_files/file.xlsx")
            except:
                await status_message.edit_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞")
                return
            await status_message.edit_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–î...")
            try:
                print(file_path)
                await add_members.update_db("time_files/file.xlsx")

                await status_message.edit_text("–ë–î –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            except:
                await status_message.edit_text("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–¥")
        else:
            await status_message.edit_text("–ü–∞—Ä–æ–ª—å –Ω–µ –≤–µ—Ä–µ–Ω")
    else:
        match message.text:
            case "–†–°–û–® —Ç—Ä–µ–∫–µ—Ä":
                user.rewrite_model_bot(message, "bot-treker")
                try:
                    user.is_registered_treker(message)

                    msg = await message.answer(
                        "–í—ã —É–∂–µ –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã –≤ –±–æ—Ç–µ, –∂–µ–ª–∞–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–Ω–æ–≤–æ?",
                        reply_markup=callbacks.builder_yes_or_no_register_button)
                    user.add_ids(message, msg.message_id)
                except:
                    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –†–°–û–®.–¢—Ä–µ–∫–µ—Ä. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –°–ù–ò–õ–°")
            case "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
                user.rewrite_model_bot(message, "bot-schedule")
                await message.answer(text="""ü§ô –ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç-—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ö—Ç–æ —Ç—ã?""",
                                     reply_markup=callbacks.builder_who_are_you_keyboard)
            case _:
                model = str(user.get_model(message))
                print(model)
                match model:
                    case "bot-schedule":
                        await get_other_message(message)
                    case "bot-treker":
                        try:
                            snils = int("".join([i for i in str(message.text) if i.isdigit()]))
                            try:
                                user.is_registered_treker(message)

                                await message.answer(
                                    "–í—ã —É–∂–µ –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã –≤ –±–æ—Ç–µ, –∂–µ–ª–∞–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–Ω–æ–≤–æ?",
                                    reply_markup=callbacks.builder_yes_or_no_register_button)
                            except:
                                try:
                                    status = user.add_info_about_user_treker(message, snils=snils)

                                    name = status["name"]
                                    classes = status["class"]

                                    await message.answer(f"–í–∞—à–µ –∏–º—è: {name}, {classes}?",
                                                         reply_markup=callbacks.builder_yes_or_no_button)
                                except:
                                    await message.answer("–í–∞—Å –Ω–µ—Ç –≤ –ë–î")
                        except:
                            await message.answer("–í–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –†–°–û–®.–¢—Ä–µ–∫–µ—Ä–∞", reply_markup=callbacks.sort_builder)
                    case _:
                        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –±–æ—Ç–∞")
